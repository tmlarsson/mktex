#!/bin/bash
clear
###################################################################################
# Source: https://github.com/tmlarsson/mktex
###################################################################################

# Initial setup
BIBER=false
CLEAN=false
UPDATE=
MINTED= # -shell-escape only needs to be used when minted is used due to potentially security flaw.
VERBOSE='grep -iE "^.*:[0-9]*:.*\|warning\| error .*$"'

# Check for input
if [ "$#" == 0 ]; then
    echo "No input..."
    exit 1
fi

# Initial setup
if [ ! -d ~/.mktex ]; then
    mkdir ~/.mktex
fi

# Check if there is a need to check for update
if [ ! -f ~/.mktex/mktex-update ]; then
    date +%s > ~/.mktex/mktex-update
else
    timeUpdated=$(cat ~/.mktex/mktex-update)
    timeNow=$(date +%s)
    diff=$((timeNow-timeUpdated))
    if [ $diff -gt 25200 ]; then
        echo -n "Do you want to update? [y/n]: "
        read UPDATE
        echo $(date +%s) > ~/.mktex/mktex-update
        if [ "$UPDATE" == "y" -o "$UPDATE" == "Y" ]; then
            update=true
        fi
    fi
fi

while [[ $# > 0 ]]
do
key="$1"
case $key in
    -b|--biber)
    BIBER=true
    ;;
    -c|--clean)
    CLEAN=true
    ;;
    -h|--help)
    HELP=true
    ;;
    -m|--minted)
    MINTED="-shell-escape"
    ;;
    -o|--open)
    OPEN=true
    ;;
    --pdflatex)
    compiler="pdflatex"
    ;;
    --tikz)
    TIKZ=true
    ;;
    --update)
    update=true
    ;;
    --gettex)
    gettex=true
    ;;
    --version)
    VERSION=true
    ;;
    -v)
    VERBOSE=" "
    ;;
    *)
    TEMP="$1"
    if [ ! -z "$UPDATE"Â  ]; then
        if [[ $TEMP =~ ".tex" ]]; then
            TEMP=${TEMP%.tex}
        fi
        if [[ "$TEMP" =~ "." ]]; then
            TEMP=${TEMP%.}
        fi
        if [[ ${TEMP:0:1} == "-" ]]; then
            echo "ERROR: \"$TEMP\" is not a valid argument..."
            echo ""
            echo "Here is the help for you:"
            echo ""
            HELP=true
        elif [ ! -f "$TEMP.tex" ]; then
            echo "The file \"$TEMP\" does not exist."
            exit 1  
        fi
    fi

    FILENAME="$TEMP"
    ;;
esac
shift # go to next argument or value
done

if [ "$VERSION" == true ]; then
    echo "mktex v1.2 : 2016-03-26"
    exit 0
fi

if [ "$HELP" == true ]; then
    echo "mktex v1.2 : 2016-03-26"
    echo "Compiles LaTeX documents with luaLaTeX"
    echo " "
    echo "Usage example: [possible flags]"
    echo "mktex filename [-b -c -m]"
    echo " "
    echo "options:"
    echo "-h, --help            show brief help"
    echo "-b, --biber           compile using biber"
    echo "-c, --clean           remove unnecessary files"
    echo "-m, --minted          Use this flag to use minted"
    echo "-v,                   Verbose mode"
    echo "--pdflatex            Overrides the default compiler with pdflatex"
    echo "--tikz                Compile only TikZ picures in standalone mode"
    echo "--update              Updates mktex into the newest found on github"
    echo "--gettex              Fetches the latest latex-template from tmlarsson"
    echo "--version             Shows the version number"
    exit 0
fi

# Updates mktex. This creates a script in the tmp folder
# that will fetch the newest file from github.
# This does however require the user to use the sudo 
# command to move the new file to the /usr/local/bin folder.
# However, since the program is open source you can always check
# the source code to inspect my work. This should always be done
# since you should NEVER run some random code of the internet 
# which requires the sudo command without trusting it. NEVER!
if [ ! -z $update ]; then
    echo -n "Checking for updates..."
    if ! wget -O ~/.mktex/mktex.html https://github.com/tmlarsson/mktex 2>/dev/null; then
        echo "[Failed]"
    exit 0
    else
        echo "[OK]"
    fi
    id=$(cat ~/.mktex/mktex.html |grep -oE -m 1 "mktex\/commit\/.{0,40}"|cut -c 14-)

    if [ -f ~/.mktex/mktex-id ]; then
        idNow=$(cat ~/.mktex/mktex-id)
    else
        echo $id > ~/.mktex/mktex-id
        idNow=false
    fi

    if [ "$id" == "$idNow" ]; then
        echo "No update available..."
        exit 0
    else
        echo "Update available!"
    fi

    # Install update
    cd /tmp
    echo Fetching update from github...
    if [ -d "/tmp/mktex" ]; then
        rm -r mktex
    fi
    if git clone https://github.com/tmlarsson/mktex ; then
        cd mktex
        mv mktex ~/.mktex/
        echo $(date +%s) > ~/.mktex/mktex-update
        chmod +x ~/.mktex/mktex
        if [[ $EUID -ne 0 ]]; then
            echo ""
            echo "Root needed to istall symlink to /usr/local/bin/"
            echo "Please run \"sudo ln -s ~/.mktex/mktex /usr/local/bin/mktex\""
            exit 1
        fi
        echo "Succeded in installing the update!"
    else
        echo "Failed to install update..."
    fi
    cd ../ && rm -rf mktex
    exit 0
fi


# Fetches the latex template from tmlarsson on github.
if [ ! -z $gettex ]; then
    dir=$PWD
    echo -n "Fetching the template..."
    
    cd /tmp

    if [ -d "latex-template" ]; then
        rm -rf latex-template
    fi
    
    if git clone https://github.com/tmlarsson/latex-template &>/dev/null
    then
        echo "[OK]"
        cd latex-template
        echo -n "Presentation or Report? [p/r]: "
        read doc
        if [ $doc == "p" ]; then
            cd Presentation
        elif [ $doc == "r" ]; then
            cd Report
        else
            echo "ERROR: \""$doc"\" is not a valid input."
            exit 0
        fi

        if ! mv *.tex "$dir" ;
        then
            echo "ERROR: The directory "$dir" does not exist."
            exit 0
        fi
        cd ..
        rm -rf latex-template
    else
        echo ""
        echo "ERROR: Failed to get template."
    fi
    exit 0
fi

# Check for existance of the compiler. If it does not exist,
# the script will exit.
if [ -z $compiler ]; then
    if type lualatex >/dev/null 2>&1;
    then
        compiler="lualatex"
    elif type pdflatex >/dev/null 2>&1;
    then
        compiler="pdflatex"
    else
        echo "ERROR: No supported compiler is installed."
        exit 0
    fi
fi

# Check if no filename is specified.
# If no filename is given then exit the program
if [ -z $FILENAME ]; then
    echo "ERROR: No filename was specified."
    exit 0
fi

# If one only wants to compile a tikz picure
# That code is exectued below
# If in TikZ mode the regular code for compiling a 
# document will be skipped
if [ "$TIKZ" == true ]; then
    echo -n "Compiling TikZ picure using $compiler..."

    tikzresult=$(max_print_line=2048 $compiler $MINTED -interaction=nonstopmode -file-line-error "${FILENAME%.tex}" 2>/tmp/tikzERR $VERBOSE)

    if [ -z "$tikzresult" ]; then
        echo "[OK]"
    else
        echo ""
        echo "Compiled with warnings in $compiler..."
        echo ""
        echo "Warnings:________________________"
        echo ""
        echo "$tikzresult"
        tikzERR=$(cat /tmp/tikzERR)
        echo "skjdbakjdkksjdhjasldh"
        echo "$tikzERR"
        echo "asgdashjdgajhsdg"
        if [ ! -z "$tikzERR" ]; then
            echo ""
            echo "ERRORS:__________________________"
            echo "$tikzERR"
            echo ""
        fi
    fi    
fi


# Compile document only if not in TIKZ mode
if [ -z "$TIKZ" ]; then

# Just adds some visual niceness
if [ "$BIBER" == true ]; then
    echo "Compile using $compiler and biber..."
else
    echo "Compile using $compiler..."
fi

# First sweep of the compilation. I have chosen to compile
# twice due to the fact that references takes two sweeps to
# fully update. Due to that fact, the output of the first
# sweep will be neglected since this usually contain errors
# not present in the second sweep.
echo -n "$compiler: First sweep..."
max_print_line=2048 $compiler $MINTED -interaction=nonstopmode -file-line-error "${FILENAME%.tex}" >/dev/null 2>&1
echo "[OK]"

# If one uses biber for references one also has to compile 
# with biber. One bug, at least on OS X happens sometimes
# where the chache has to be removed for the program to 
# compile. This take care of that automatically.
if [ "$BIBER" == true ]; then
    runAgain=true
    while [ "$runAgain" == true ]; do
        echo -n "biber..."
        biber "$FILENAME" 1>/tmp/bibres 2>/tmp/biberr
        bibRES=$(cat /tmp/bibres | grep -i "^.*:[0-9]*:.*\|warn\| error .*$")
        bibERR=$(</tmp/biberr)
        echo "[OK]"

        # Check fo data bug in biber
        vartest=$(echo "$bibERR" | grep "no data found")
        if [ ! -z "$vartest" ]; then
            rm -rf `biber --cache`
            echo ""
            echo "Removed biber cache..."
            echo "Compiling again..."
            runAgain=true
        else
            runAgain=false
        fi
    done
fi

# Second sweep with the given compiler
echo -n "$compiler: Second sweep..."

max_print_line=2048 $compiler $MINTED -interaction=nonstopmode -file-line-error "${FILENAME%.tex}" 1>/tmp/latex-output 2>/tmp/latexerr 

result=$(cat /tmp/latex-output | grep -i "^.*:[0-9]*:.*\|warning\| error .*$")

temp=$(echo "$result" |grep -i "The following entry could not be found")

if [ ! -z "$temp" ]; then
    bibres=$(cat /tmp/latex-output |grep -i "(biblatex) ")
    result+="\n$bibres"
fi


echo "[OK]"

# Prints the result, if there is any errors to display.
if [ -z "$result" -a -z "$bibRES" ]; then
    echo ""
    echo 'Compiled without errors!'
elif [ ! -z "$result" ]; then
    echo ""
    echo "Compiled with warnings in $compiler..."
    echo ""
    echo "Warnings:________________________"
    echo -e "$result"           # echo -e to print new line when \n is written
    latexERR=$(cat /tmp/latexerr)
    if [ ! -z "$latexERR" ]; then
        echo ""
        echo "ERRORS:__________________________"
        echo "$latexERR"
        echo ""
    fi
elif [ ! -z "$bibRES" ]; then
    echo ""
    echo "Compiled with errors in biber..."
    echo ""
    echo "Warnings:________________________"
    echo "$bibRES"
    if [ ! -z "$bibERR" ]; then
        echo ""
        echo "ERRORS:________________________"
        echo "$bibERR"
    fi
fi
fi

# Remove unnessesary files.
if [ "$CLEAN" == true ]; then
    if [ -f "${FILENAME}.log" ]; then
        rm ${FILENAME}.log
    fi
    if [ -f "${FILENAME}.lof" ]; then
        rm ${FILENAME}.lof
    fi
    if [ -f "${FILENAME}.blg" ]; then
        rm ${FILENAME}.blg
    fi
    if [ -f "${FILENAME}.toc" ]; then
        rm ${FILENAME}.toc
    fi
    if [ -f "${FILENAME}.out" ]; then
        rm ${FILENAME}.out
    fi

    if [ -f "${FILENAME}.bbl" ]; then
        rm ${FILENAME}.bbl
    fi
    if [ -f "${FILENAME}.aux" ]; then
        rm ${FILENAME}.aux
    fi
    if [ -f "${FILENAME}.bcf" ]; then
        rm ${FILENAME}.bcf
    fi
    if [ -f "${FILENAME}.run.xml" ]; then
        rm ${FILENAME}.run.xml
    fi
    if [ -f "${FILENAME}.tex.bak" ]; then
        rm ${FILENAME}.tex.bak
    fi
    if [ -f "${FILENAME}.fls" ]; then
        rm ${FILENAME}.fls
    fi
    if [ -f "${FILENAME}.fdb_latexmk" ]; then
        rm ${FILENAME}.fdb_latexmk
    fi
    if [ -f "${FILENAME}.snm" ]; then
        rm ${FILENAME}.snm
    fi
    if [ -f "${FILENAME}.nav" ]; then
        rm ${FILENAME}.nav
    fi
    if [ -f "${FILENAME}.lot" ]; then
        rm ${FILENAME}.lot
    fi
fi


dontopen=$(cat /tmp/latex-output | grep -i "^.*:[0-9]*:.*\|fatal error .*$") 

if [ ! -z "$dontopen" ]; then
    exit 0
fi
# Opens the file if the -o flag was specified
if [ "$OPEN" == true ]; then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        xdg-open "${FILENAME}.pdf"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        open "${FILENAME}.pdf"
    fi
fi
