#!/bin/bash
clear
# Use > 1 to consume two FILENAMEs per pass in the loop (e.g. each
# FILENAME has a corresponding value to go with it).
# Use > 0 to consume one or more FILENAMEs per pass in the loop (e.g.
# some FILENAMEs don't have a corresponding value to go with it such
# as in the --default example).
# note: if this is set to > 0 the /etc/hosts part is not recognized ( may be a bug )
####################################################################################
# Source: https://github.com/tmlarsson/mktex
####################################################################################

# Initial setup
BIBER=False
CLEAN=False
MINTED= # -shell-escape only needs to be used when minted is used due to potentially security flaw.

# Check for input
if [ "$#" == 0 ]; then
    echo "No input..."
    exit 1
fi

while [[ $# > 0 ]]
do
key="$1"

case $key in
    -b|--biber)
    BIBER=true
    ;;
    -c|--clean)
    CLEAN=true
    ;;
    -h|--help)
    HELP=true
    ;;
    -m|--minted)
    MINTED="-shell-escape"
    ;;
    -o|--open)
    OPEN=true
    ;;
    *)
    TEMP="$1"
    if [[ $TEMP =~ ".tex" ]]; then
        TEMP=${TEMP%.tex}
    fi
    if [[ "$TEMP" =~ "." ]]; then
        TEMP=${TEMP%.}
    fi
    if [ ! -f "$TEMP.tex" ]; then
        echo "No such file exists"
        exit 1  
    fi

    FILENAME="$TEMP"
    ;;
esac
shift # go to next argument or value
done


if [ "$HELP" == true ]; then
    echo "mktex - Compiles LaTeX documents with pdfLaTeX"
    echo " "
    echo "Usage example: [possible flags]"
    echo "mktex filename [-b -c -m]"
    echo " "
    echo "options:"
    echo "-h, --help            show brief help"
    echo "-b, --biber           compile using biber"
    echo "-c, --clean           remove unnecessary files"
    echo "-m, --minted          Use this flag to use minted"
    exit 0
fi

if [ -z $FILENAME ]; then
    echo "No filename was specified..."
    exit 0
fi

if [ "$BIBER" == true ]; then
    echo -n "Compile using pdflatex and biber..."
else
    echo -n "Complie using pdflatex..."
fi

# Compile document
pdflatex $MINTED -interaction=nonstopmode -file-line-error "${FILENAME%.tex}" | grep something
# grep somthing is just to kill the output.

if [ "$BIBER" == true ]; then
    biber "$FILENAME"  | grep something
fi


result=$(max_print_line=2048 pdflatex $MINTED -interaction=nonstopmode -file-line-error "${FILENAME%.tex}" | grep -i "^.*:[0-9]*:.*\|warning.*$") 

if [ -z "$result" ]; then
    echo '[OK]'
else
    echo ""
    echo "$result"
fi

# Remove unnessesary files.
if [ "$CLEAN" == true ]; then
    if [ -f "${FILENAME}.log" ]; then
        rm *.log
    fi
    if [ -f "${FILENAME}.lof" ]; then
        rm *.lof
    fi
    if [ -f "${FILENAME}.blg" ]; then
        rm *.blg
    fi
    if [ -f "${FILENAME}.toc" ]; then
        rm *.toc
    fi
    if [ -f "${FILENAME}.out" ]; then
        rm *.out
    fi

    if [ -f "${FILENAME}.bbl" ]; then
        rm *.bbl
    fi
    if [ -f "${FILENAME}.aux" ]; then
        rm *.aux
    fi
    if [ -f "${FILENAME}.bcf" ]; then
        rm *.bcf
    fi
    if [ -f "${FILENAME}.run.xml" ]; then
        rm *.run.xml
    fi
    if [ -f "${FILENAME}.tex.bak" ]; then
        rm *.tex.bak
    fi
    if [ -f "${FILENAME}.fls" ]; then
        rm *.fls
    fi
    if [ -f "${FILENAME}.fdb_latexmk" ]; then
        rm *.fdb_latexmk
    fi
fi

if [ "$OPEN" == true ]; then
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        xdg-open "${FILENAME}.pdf"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        open "${FILENAME}.pdf"
    fi
fi
