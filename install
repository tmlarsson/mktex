#!/bin/bash
  # Use colors, but only if connected to a terminal, and that terminal
  # supports them.
  if which tput >/dev/null 2>&1; then
      ncolors=$(tput colors)
  fi
  if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
  else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BOLD=""
    NORMAL=""
  fi

  # Only enable exit-on-error after the non-critical colorization stuff,
  # which may fail on systems lacking tput or terminfo
  set -e

  CHECK_GIT_INSTALLED=$(which git)
  if [[ $CHECK_GIT_INSTALLED =~ "not" ]]; then
    printf "${YELLOW}git is not installed!${NORMAL} Please install git first!\n"
    exit
  fi
  unset CHECK_GIT_INSTALLED

  if [ ! -n "$MKTEX" ]; then
    MKTEX=~/.mktex
  fi

  if [ -d "$MKTEX" ]; then
    printf "${YELLOW}You already have mkTeX installed.${NORMAL}\n"
    printf "You'll need to remove $MKTEX if you want to re-install.\n"
    exit
  fi

  # Prevent the cloned repository from having insecure permissions. Failing to do
  # so causes compinit() calls to fail with "command not found: compdef" errors
  # for users with insecure umasks (e.g., "002", allowing group writability). Note
  # that this will be ignored under Cygwin by default, as Windows ACLs take
  # precedence over umasks except for filesystems mounted with option "noacl".
  umask g-w,o-w

  printf "${BLUE}Cloning mkTeX...${NORMAL}\n"
  hash git >/dev/null 2>&1 || {
    echo "Error: git is not installed"
    exit 1
  }
  env git clone --depth=1 https://github.com/tmlarsson/mktex.git $ZSH || {
    printf "Error: git clone of mkTeX repo failed\n"
    exit 1
  }

  printf "${BLUE}Looking for an existing zsh config...${NORMAL}\n"
  if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; then
    printf "${YELLOW}Found ~/.zshrc.${NORMAL} ${GREEN}Backing up to ~/.zshrc.pre-oh-my-zsh${NORMAL}\n";
    mv ~/.zshrc ~/.zshrc.pre-oh-my-zsh;
  fi

    if [ $SHELL == "/bin/zsh" ]; then
        printf "${BLUE}Copying your current PATH and adding it to the end of ~/.zshrc for you.${NORMAL}\n"
        sed "/export PATH=/ c\\
        export PATH=\"$PATH\"
        " ~/.zshrc > ~/.zshrc-omztemp
        mv -f ~/.zshrc-omztemp ~/.zshrc
    elif [ $SHELL == "/bin/bash"Â ]; then
        printf "${BLUE}Copying your current PATH and adding it to the end of ~/.zshrc for you.${NORMAL}\n"
        sed "/export PATH=/ c\\
        export PATH=\"$PATH\"
        " ~/.bashrc > ~/.bashrc-temp
        mv -f ~/.bashrc-temp ~/.bashrc
    else
        printf "${RED} No supported shell used. Only zsh and bash are supported${NORMAL}\n."
    fi


  printf "${GREEN}"
    echo '	          __ ______  __   __'
    echo '           | |__   __| \ \ / /'
    echo '  _ __ ___ | | _| | ___ \ V / '
    echo ' | ` `  _ \| |/ / |/ _ \ > <  '
    echo ' | | | | | |   <| |  __// . \ '
    echo ' |_| |_| |_|_|\_\_|\___/_/ \_\ ... is now installed!'
    echo ''
  printf "${NORMAL}"
